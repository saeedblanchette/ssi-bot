import time
from typing import Any

from peewee import Model, IntegerField, TextField, TimestampField
from playhouse.sqlite_ext import JSONField
from playhouse.sqliteq import SqliteQueueDatabase

db:Any = SqliteQueueDatabase('bot-db.sqlite3', pragmas={'journal_mode': 'wal', 'foreign_keys': 1})


class Thing(Model):
	# This table is not meant to represent a complete relationship of submissions/comments on reddit

	# Its behaviour is more of a log to track submissions and comments
	# that have had replies attempted and prevent replying twice

	# It also acts as a job queue of sorts, for the model text generator daemon

	# timestamp representation of when this record was entered into the database
	created_utc = TimestampField(default=time.time, utc=True)

	# the praw *name* of the original comment or submission,
	# where t3_ prefix = submission, t1_ prefix = comment
	source_name = TextField()

	# json object of the model parameters, passed into the generator daemon function
	text_generation_parameters = JSONField(null=True)

	# Count text generation attempts. In normal operation this will only be 0 or 1
	text_generation_attempts = IntegerField(default=0)
	# text generated by model and returned to the job
	generated_text = TextField(null=True)

	# the subreddit used by new_submission job type
	subreddit = TextField(null=True)

	# attempts to post the generated_text back to reddit
	reddit_post_attempts = IntegerField(default=0)

	# The 'name' of the object posted back to reddit
	posted_name = TextField(null=True)

	class Meta:
		database = db


def create_db_tables()->None:

	db.create_tables(models=[Thing])
	# these stop/start calls are required
	# because of nuance in SqliteQueueDatabase
	db.stop()
	db.start()
